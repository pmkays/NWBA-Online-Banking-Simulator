@model NWBA_Web_Admin.Models.ViewModels.GraphViewModel
@{
    ViewData["Title"] = "Graphs";
}

<head>
    <link rel="stylesheet" href="~/css/Chart.css" />
</head>


<h1>Statistics</h1>

<div class="row">
    <div class="col-lg-3 col-md-4">
        <form id="form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div id="destinationAccount" class="form-group">
                <label asp-for="CustomerID" class="control-label"> Customer: </label>
                <select id="customer-select" asp-for="CustomerID" class="form-control">
                    <option value="0"> All </option>
                    @foreach (var customer in (List<Customer>)ViewBag.AllCustomers)
                    {
                        <option value="@customer.CustomerId"> @customer.CustomerName: &nbsp; @customer.CustomerId </option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Date1" class="control-label">From: </label>
                <input id="date1" type="date" asp-for="Date1" class="form-control" />
                <span asp-validation-for="Date1" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Date2" class="control-label">To: </label>
                <input id="date2" type="date" asp-for="Date2" class="form-control" />
                <span asp-validation-for="Date2" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="GraphType" class="control-label">Data</label>
                <select id="graphType" asp-for="GraphType" class="form-control">
                    <option value="bar">Transactions per day (Bar)</option>
                    <option value="pie">Proportion of transaction types (Pie)</option>
                    <option value="line">Amount deposited per day (Line)</option>
                </select>
            </div>
            <div class="form-group">
                <input id="Submit" type="submit" value="View" class="btn btn-primary" />
            </div>
            <span id="dateError" class="text-danger"></span>
        </form>
    </div>

    <div class="col-lg-9">
        <canvas id="transactionChart"></canvas>
    </div>
</div>

<div class="container">
    <br />
    <hr />
    <button id="button" class="btn btn-primary" style="display:none">Show statements of this time period</button>
    <hr>
    <table id="trans-table" class="table"></table>
</div>

<script src="~/js/Chart.js"></script>
<script src="~/js/moment.js"></script>
<script src ="~/js/jquery-3.4.1.js"></script>
<script>
    var canvas = document.getElementById("transactionChart").getContext("2d");
    var transactionChart = null; 
    $("#form").submit(function (e) {
        //so ajax can be called
        e.preventDefault();

        //clears canvas for next graph redrawing
        if (transactionChart != null) {
            console.log("destroyed");
            transactionChart.destroy();
        }

        //variables for form validation
        var proceed = true;
        var date1 = document.getElementById("date1").value; 
        var date2 = document.getElementById("date2").value;
        var earliestDate = moment('2019-12-19').format('YYYY-MM-DD');
        var error = document.getElementById("dateError");

        if (date2 < date1 || date1 > moment().format('YYYY-MM-DD') || date2 > moment().format('YYYY-MM-DD')) {
            clearTable();
            error.innerHTML = "Please ensure dates chosen are valid";
            proceed = false;
        } else if (date1 < earliestDate || date2 < earliestDate) {
            clearTable();
            error.innerHTML = "There are no transactions before 19/12/2019";
            proceed = false;
        }

        //calls the right graphs depending on graphType and if the form is valid
        var serializedForm = $('#form').serializeArray();
        if (document.getElementById("graphType").value == "bar" && proceed) {
            $.post('@Url.Action("BarGraph", "Transactions")', serializedForm, function (transactionDates) {
                var object = transactionDates;
                const labels = [];
                const data = [];
                
                for (let x of object) {                 
                    labels.push(moment(x.date).format('DD/MM/YYYY'));
                    data.push({ t: moment(x.date).format('DD/MM/YYYY'), y: x.count });
                }

                transactionChart = new Chart(canvas, {
                    type: "bar",
                    data: {
                        labels: labels,
                        datasets: [{
                            label: "Transaction count",
                            data: data,
                            options: {
                                scales: {
                                    xAxes: [{
                                        type: "time",
                                        time: {
                                            unit: "day"
                                        }
                                    }]
                                }
                            },
                            backgroundColor: "#ED7348",
                            borderColor: "#E95420",
                            borderWidth: 1
                        }]
                    }
                });
            });
            document.getElementById("button").innerHTML = "Show statement of this time period";
            document.getElementById("button").style = "display:inline";
            document.getElementById("trans-table").innerHTML = "";
            error.innerHTML = " ";
        }
        else if (document.getElementById("graphType").value == "pie" && proceed) {
            $.post('@Url.Action("PieGraph", "Transactions")', serializedForm, function (transactionDates) {
                var object = transactionDates;

                const labels = [];
                const data = [];
                for (let x of object) {
                    var typeDisplay; 
                    switch(x.type)
                    {
                        case ("D"):
                            typeDisplay = "Deposit"; 
                            break;
                        case ("W"):
                            typeDisplay = "Withdrawal"; 
                            break;
                        case ("T"):
                            typeDisplay = "Transfer"; 
                            break;
                        case ("B"):
                            typeDisplay = "Billpay"; 
                            break;
                        case ("S"):
                            typeDisplay = "Service";
                            break;
                    }
                    labels.push(typeDisplay);
                    data.push(x.count);
                }

                transactionChart = new Chart(canvas, {
                    type: "doughnut",
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: ["#F9C80E", "#ED7348", "#8154AD", "#43BCCD", "#F19271"],                          
                            borderWidth: 1
                        }]
                    }
                });
            });
            document.getElementById("button").innerHTML = "Show statement of this time period";
            document.getElementById("button").style = "display:inline";
            document.getElementById("trans-table").innerHTML = "";
            error.innerHTML = " ";
        }
        else if(document.getElementById("graphType").value == "line" && proceed) {
            $.post('@Url.Action("LineGraph", "Transactions")', serializedForm, function (transactionDates) {
                var object = transactionDates;
                const labels = [];
                const data = [];

                for (let x of object) {                 
                    labels.push(moment(x.date).format('DD/MM/YYYY'));
                    data.push({ t: moment(x.date).format('DD/MM/YYYY'), y: x.amount.toFixed(2) });
                }

                transactionChart = new Chart(canvas, {
                    type: "line",
                    data: {
                        labels: labels,
                        datasets: [{
                            label: "Amount deposited",
                            data: data,
                            options: {
                                scales: {
                                    xAxes: [{
                                        type: "time",
                                        time: {
                                            unit: "day"
                                        }
                                    }]
                                }
                            },
                            backgroundColor: "#ED7348",
                            borderColor: "#E95420",
                            borderWidth: 1
                        }]
                    }
                });
            });
            document.getElementById("button").innerHTML = "Show statement of this time period";
            document.getElementById("button").style = "display:inline";
            document.getElementById("trans-table").innerHTML = "";
            error.innerHTML = " ";
        }
    })

    //event listeners table-related functionality
    document.getElementById("button").onclick = generateTableView;
    document.getElementById("customer-select").onchange = clearTable;

    function clearTable() {
        document.getElementById("trans-table").innerHTML = "";
        document.getElementById("button").innerHTML = "Show statement of this time period";
        document.getElementById("button").style = "display:none";
    }

    //generates the table in html
    function generateTableView() {
        if (document.getElementById("trans-table").innerHTML == "") {
            document.getElementById("button").innerHTML = "Hide statement of this time period";
            
            var f = $('#form');

            var serializedForm = f.serializeArray();

            $.post('@Url.Action("Tables", "Transactions")', serializedForm, function (transactions) {
                //set up variables to use throughout code
                var trans = transactions;
                let table = document.querySelector("table");
                let headers = ["Transaction ID", "Transaction Type", "Account", "Destination Account", "Amount", "Comment", "Time"]

                //create first head and row for first line
                let thead = table.createTHead();
                let row = thead.insertRow();
                //generates the headers for each column
                for (let key of headers) {
                    let th = document.createElement("th");
                    let text = document.createTextNode(key);
                    //put in text for each th cell
                    th.appendChild(text);
                    //put the th in the row
                    row.appendChild(th);
                }

                for (let element of trans) {
                    //insert a new row for each element
                    let row = table.insertRow();
                    var index = 0;
                    var transTypeElement = 1; 
                    var amountElement = 4;
                    var endElement = 6;
                    //loops through each element one by one to individually put in the cells
                    for (key in element) {
                        //insert individual cell
                        let cell = row.insertCell();
                        //insert text in that cell
                        var text = "";

                        //format null and default
                        if (element[key] == null) {
                            text = document.createTextNode("N/A");
                        }
                        else {
                            text = document.createTextNode(element[key]);
                        }

                        //format transaction tpye
                        if (index == transTypeElement) {
                            switch (element[key]) {
                                case ("D"):
                                    text = document.createTextNode("Deposit");
                                    break;
                                case ("W"):
                                    text = document.createTextNode("Withdrawal");
                                    break;
                                case ("T"):
                                    text = document.createTextNode("Transfer");
                                    break;
                                case ("B"):
                                    text = document.createTextNode("Billpay");
                                    break;
                                case ("S"):
                                    text = document.createTextNode("Service");
                                    break;
                            }
                        }

                        //format amount
                        if (index == amountElement) {
                            text = document.createTextNode(element[key].toFixed(2)); 
                        }

                        //format date
                        if (moment(element[key]).isValid() && index == endElement) {
                            text = document.createTextNode(moment(element[key]).format('DD/MM/YYYY hh:mm:ss'));
                        }

                        cell.appendChild(text);
                        index++; 
                    }
                }
            })
        } else {
            document.getElementById("trans-table").innerHTML = "";
            document.getElementById("button").innerHTML = "Show statement of this time period";
        }
    }
</script>
